@using Newtonsoft.Json

@model List<InventoryApp.Models.ProgressViewModel>

@{
    ViewData["Title"] = "Manager -  Dashboard";
}

<!-- Bootstrap 5 CSS CDN for styling -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />

<style>
    body {
        background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        min-height: 100vh;
        margin: 0;
        padding: 2rem 0;
        color: #343a40;
    }

    h2 {
        font-weight: 800;
        text-align: center;
        margin-bottom: 3rem;
        color: #fff;
        text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.3);
        font-size: 2.4rem;
        letter-spacing: 1.5px;
    }

    .table-responsive {
        max-width: 900px;
        margin: 0 auto 4rem auto;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
        border-radius: 12px;
        overflow: hidden;
        background: #fff;
    }

    table {
        border-collapse: separate !important;
        border-spacing: 0 12px;
        width: 100%;
    }

    thead tr {
        background-color: #2575fc;
        color: white;
        font-weight: 700;
        font-size: 1.1rem;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(37, 117, 252, 0.5);
    }

    thead th {
        padding: 14px 12px;
        text-align: center;
    }

    tbody tr {
        background: #f6f9ff;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.04);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    tbody tr:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(37, 117, 252, 0.4);
        background-color: #d6e4ff;
    }

    tbody td {
        padding: 16px 12px;
        font-weight: 600;
        font-size: 1rem;
        color: #2a2a2a;
        text-align: center;
    }

    .chart-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 2.5rem 2rem;
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
    }

    h3 {
        color: #2575fc;
        font-weight: 700;
        font-size: 1.8rem;
        text-align: center;
        margin-bottom: 1.8rem;
        letter-spacing: 1.1px;
    }
</style>

<div class="container">
    <h2>@ViewData["Title"]</h2>

    <!-- Table View -->
    <div class="table-responsive">
        <table class="table align-middle text-center mb-0">
            <thead>
                <tr>
                    <th>User</th>
                    <th>Added</th>
                    <th>Updated</th>
                    <th>Deleted</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.UserId</td>
                        <td>@item.AddCount</td>
                        <td>@item.UpdateCount</td>
                        <td>@item.DeleteCount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Chart Section -->
    <div class="chart-container">
        <h3>Progress Chart</h3>
        <canvas id="progressChart" width="800" height="400"></canvas>
    </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    const ctx = document.getElementById('progressChart').getContext('2d');

    // Create gradient colors for better visuals
    const gradientAdded = ctx.createLinearGradient(0, 0, 0, 400);
    gradientAdded.addColorStop(0, 'rgba(37, 117, 252, 0.9)');
    gradientAdded.addColorStop(1, 'rgba(37, 117, 252, 0.4)');

    const gradientUpdated = ctx.createLinearGradient(0, 0, 0, 400);
    gradientUpdated.addColorStop(0, 'rgba(99, 179, 255, 0.9)');
    gradientUpdated.addColorStop(1, 'rgba(99, 179, 255, 0.4)');

    const gradientDeleted = ctx.createLinearGradient(0, 0, 0, 400);
    gradientDeleted.addColorStop(0, 'rgba(255, 99, 132, 0.9)');
    gradientDeleted.addColorStop(1, 'rgba(255, 99, 132, 0.4)');

    const progressChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(m => m.UserId))),
            datasets: [
                {
                    label: 'Added',
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(m => m.AddCount))),
                    backgroundColor: gradientAdded,
                    borderRadius: { topLeft: 10, topRight: 10, bottomLeft: 0, bottomRight: 0 },
                    stack: 'Stack 0',
                },
                {
                    label: 'Updated',
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(m => m.UpdateCount))),
                    backgroundColor: gradientUpdated,
                    borderRadius: { topLeft: 10, topRight: 10, bottomLeft: 0, bottomRight: 0 },
                    stack: 'Stack 0',
                },
                {
                    label: 'Deleted',
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(m => m.DeleteCount))),
                    backgroundColor: gradientDeleted,
                    borderRadius: { topLeft: 10, topRight: 10, bottomLeft: 0, bottomRight: 0 },
                    stack: 'Stack 0',
                }
            ]
        },
        options: {
            responsive: true,
            interaction: {
                mode: 'index',
                intersect: false
            },
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        font: {
                            size: 14,
                            weight: '600'
                        },
                        color: '#343a40'
                    }
                },
                tooltip: {
                    enabled: true,
                    backgroundColor: '#2575fc',
                    titleFont: { size: 16, weight: 'bold' },
                    bodyFont: { size: 14 }
                }
            },
            scales: {
                y: {
                    stacked: true,
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1,
                        font: {
                            size: 13
                        },
                        color: '#343a40'
                    },
                    grid: {
                        color: 'rgba(37, 117, 252, 0.15)'
                    }
                },
                x: {
                    stacked: true,
                    ticks: {
                        font: {
                            size: 13
                        },
                        color: '#343a40'
                    },
                    grid: {
                        display: false
                    }
                }
            }
        }
    });
</script>
